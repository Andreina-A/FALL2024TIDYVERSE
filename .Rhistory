library(tidyverse)
#Loading the Data
google_data <- read.csv("https://raw.githubusercontent.com/Chung-Brandon/FALL2024TIDYVERSE/refs/heads/main/Google.csv")
# The mutate() function adds a new variable that is a function of existing variables.
#Example 1
google_data <- google_data %>%
mutate(day_change = (((Close - Open) / Open) * 100))
# Here we created a new variable called "day_change" by using Google's stock price on the open and the close.
head(google_data)
#Example 2
google_data <- google_data %>%
mutate(day_pchange.5 = abs(day_change) >5)
head(google_data)
# The select() function picks variables based on their names.
#Example
google_data.select <- google_data %>%
select(Date, Volume:day_pchange.5)
# Here we decided we only wanted to look at the variables Date, Volume, day_change, and day_pchange.5, so we used select to limit the data based on variables. Select returns all rows for the specified columns
head(google_data.select)
#The filter() function picks cases based on their values.
#Example
google_data.filter <- google_data %>%
filter(day_pchange.5 == "TRUE")
# Here we decided we only wanted to look at the rows (cases) where the day_pchange.5 was "TRUE", so we used filter to limit the data based on the value day_pchange.5 being TRUE. Filter returns all columns for the specified cases.
head(google_data.filter)
#The summarise() function reduces multiple values down to a single summary.
#Example
google_data %>%
group_by(day_pchange.5) %>%
summarise(avg_volume = mean(Volume),
count = n())
# Here we wanted to summarize our data by pulling out statistics of count and average volume. I first grouped the data by day_pchange.5 values (TRUE or FALSE), then the summarise function pulls the statistics for each group. Using group_by then summarise makes for easy statistic comparisons.
View(google_data)
View(google_data)
# Looking at the open and close of each day as a line graph
ggplot(googe_data, aes(x = Date, y = open)) +
geom_line()
# Looking at the open and close of each day as a line graph
ggplot(google_data, aes(x = Date, y = open)) +
geom_line()
View(google_data)
# Looking at the open and close of each day as a line graph
ggplot(google_data, aes(x = Date, y = Open)) +
geom_line()
class(google_data$Date)
# convert Date column to a Date object
google_data$Date <- mdy(google_data$Date)
# convert Date column to a Date object
google_data$Date <- as.Date(google_data$Date)
# Looking at the open and close of each day as a line graph
ggplot(google_data, aes(x = Date, y = Open)) +
geom_line()
# Looking at the open and close of each day as a line graph
ggplot(google_data, aes(x = Date, y = Open)) +
geom_line()
library(tidyverse)
#Loading the Data
google_data <- read.csv("https://raw.githubusercontent.com/Chung-Brandon/FALL2024TIDYVERSE/refs/heads/main/Google.csv")
# The mutate() function adds a new variable that is a function of existing variables.
#Example 1
google_data <- google_data %>%
mutate(day_change = (((Close - Open) / Open) * 100))
# Here we created a new variable called "day_change" by using Google's stock price on the open and the close.
head(google_data)
#Example 2
google_data <- google_data %>%
mutate(day_pchange.5 = abs(day_change) >5)
head(google_data)
# The select() function picks variables based on their names.
#Example
google_data.select <- google_data %>%
select(Date, Volume:day_pchange.5)
# Here we decided we only wanted to look at the variables Date, Volume, day_change, and day_pchange.5, so we used select to limit the data based on variables. Select returns all rows for the specified columns
head(google_data.select)
#The filter() function picks cases based on their values.
#Example
google_data.filter <- google_data %>%
filter(day_pchange.5 == "TRUE")
# Here we decided we only wanted to look at the rows (cases) where the day_pchange.5 was "TRUE", so we used filter to limit the data based on the value day_pchange.5 being TRUE. Filter returns all columns for the specified cases.
head(google_data.filter)
#The summarise() function reduces multiple values down to a single summary.
#Example
google_data %>%
group_by(day_pchange.5) %>%
summarise(avg_volume = mean(Volume),
count = n())
# Here we wanted to summarize our data by pulling out statistics of count and average volume. I first grouped the data by day_pchange.5 values (TRUE or FALSE), then the summarise function pulls the statistics for each group. Using group_by then summarise makes for easy statistic comparisons.
View(google_data)
# convert Date column to a Date object
google_data %>% mutate(Date = as.Date(Date))
# Looking at the open and close of each day as a line graph
ggplot(google_data, aes(x = Date, y = Open)) +
geom_line()
# Looking at the open and close of each day as a line graph
ggplot(google_data, aes(x = Date, y = Open)) +
geom_point()
# Looking at the open and close of each day as a scatter plot
ggplot(google_data) +
geom_point(aes(x = Date, y = Open))
# Looking at the open and close of each day as a scatter plot
ggplot(google_data) +
geom_point(aes(x = Date, y = Open), color = "blue")
# Looking at the open and close of each day as a scatter plot
ggplot(google_data) +
geom_point(aes(x = Date, y = Open), color = "blue") +
geom_point(aes(x = Date, y = Close), color = "red")
# Looking at the open and close of each day as a scatter plot
ggplot(google_data) +
geom_point(aes(x = Date, y = Open), color = "blue")
